# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  paths:
    exclude:
    - README.md
    - docs/*


variables:
  solution: '**/*.sln'
  vmImageName: 'vs2017-win2016'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 1
  minor: 1

name: $(major).$(minor)$(Rev:.r)

stages:
  - stage: Build_RunUnitTests_Publish
    displayName: "Build, Run Unit Tests and PublishBuildArtifacts"
    jobs:
      - job: Build
        pool: 
          vmImage: 'windows-latest'
        variables:
          buildConfiguration: 'Release' 
        continueOnError: false

        steps:
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - task: UseDotNet@2
          inputs:
            version: '5.0.x'
            includePreviewVersions: true
          displayName: 'Install .net 5.0.x'

        - task: UseDotNet@2
          inputs:
            version: '3.x'
            packageType: runtime
          displayName: 'Install .net core 3.x'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            arguments: '--configuration $(buildConfiguration)'
          displayName: 'dotnet build $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          condition: succeededOrFailed()
          inputs:
            command: test
            projects: '**/*Test.Unit.csproj'
            publishTestResults: true
            arguments: '--configuration $(buildConfiguration) --collect "Code coverage" --settings:CodeCoverage.runsettings'
          displayName: 'Run unit tests'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '.\Bin\Release\AnyCPU'
            ArtifactName: 'drop'
            publishLocation: 'Container'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '.\publish\Bin\Release\AnyCPU'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: "IntegrationTests"
    displayName: "Integration Tests"

    jobs: 
      - job: "RunMultipleTests"
        displayName: "Run Multiple Tests"
        pool:
          name: 'Azure Pipelines'
          vmImage: $(vmImageName)
          demands: VSTest

        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifacts'
          inputs:
            buildType: specific
            project: 'MSTestRepeat'
            pipeline: 1
            specificBuildWithTriggering: true
            downloadType: specific
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - powershell: |
           # Set the number of iterations environment variable
           
           [System.Environment]::SetEnvironmentVariable('NumberofIterations',"20", "User")
           
          displayName: 'Set Number of iterations'

        - task: VSTest@2
          displayName: 'Run Tests with iterations'
          inputs:
            testAssemblyVer2: |
             **\*Test.Integration*.dll
             !**\*TestAdapter.dll
             !**\obj\**
            codeCoverageEnabled: true
            testRunTitle: RunwithRepeat
        
        - powershell: |
           # Set the number of iterations environment variable
           
           [System.Environment]::SetEnvironmentVariable('NumberofIterations',"", "User")
           
          displayName: 'Reset Number of iterations'

        - task: VSTest@2
          displayName: 'Run Tests with no iterations'
          inputs:
            testAssemblyVer2: |
             **\*Test.Integration*.dll
             !**\*TestAdapter.dll
             !**\obj\**
            codeCoverageEnabled: true
            testRunTitle: RunwithNoRepeat

      - job: GenerateBuildReport
        dependsOn: RunMultipleTests
        condition: 
        displayName: "Generate Build Report"
        pool:
          name: 'Azure Pipelines'
          vmImage: $(vmImageName)
        
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: 'Download Build Artifacts'
          inputs:
            buildType: specific
            project: 'e8c0d705-6817-4252-acb1-5ec8ad488166'
            pipeline: 2
            downloadType: specific
            itemPattern: |
             **
             !AzTestReporter.BuildRelease.Apis/**
             !AzTestReporter.BuildRelease.Apis.Test.Unit/**
             !AzTestReporter.BuildRelease.Builder/**
             !AzTestReporter.BuildRelease.Builder.Test.Unit/**
             !AzTestReporter.TestContent/**
            downloadPath: '$(System.DefaultWorkingDirectory)'

        - powershell: |
           Write-Host "Generate report"
           
           $(System.DefaultWorkingDirectory)\drop\AzTestReporter.App.exe --trt Integration --sendmail false --v true
          workingDirectory: '$(System.DefaultWorkingDirectory)\drop'
          displayName: 'PowerShell Script'
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
